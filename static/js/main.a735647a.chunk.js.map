{"version":3,"sources":["Algorithms/BubbleSort.js","Algorithms/InsertionSort.js","Helpers/LongestDigitHelper.js","Algorithms/RadixSort.js","Algorithms/MergeSort.js","Visualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["BubbleSort","ogArray","changeArray","tmp","i","length","j","push","InsertionSort","unsortedArray","key","LongestDigitHelper","array","longestDigit","curr_length","Math","ceil","log10","RadixSort","workingArray","current_power","longest_digit","buckets","flattenedArray","floor","pow","indx","splice","console","log","MergeHelper","main","start","end","auxArray","middle","MergeSort","k","MergeSortController","slice","SortingVisualizer","props","useState","setArray","mounted","useEffect","generateArray","generatedArray","random","className","onClick","aniArray","arrayElements","document","getElementsByClassName","elementIndx","elementStyle","style","colour","setTimeout","height","backgroundColor","getRadixSort","elementOne","elementTwo","elementOneStyle","elementTwoStyle","heightOne","getMergeSort","elementOneIndx","elementTwoIndx","getBubbleSort","getInsertionSort","map","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a735647a.chunk.js","sourcesContent":["\r\n\r\nconst BubbleSort = (ogArray) => {\r\n\r\n    let changeArray = []\r\n    let tmp = null\r\n\r\n    for (let i = 0; i < ogArray.length - 1; i++) {\r\n        \r\n\r\n        for (let j = 0; j < ogArray.length - i - 1; j++) {\r\n\r\n            changeArray.push([j, j+1, false])\r\n            changeArray.push([j, j+1, false])\r\n            \r\n            if (ogArray[j] > ogArray[j+1]) {\r\n                changeArray.push([j, j+1, true, ogArray[j], ogArray[j+1]])\r\n                tmp = ogArray[j]\r\n                ogArray[j] = ogArray[j + 1]\r\n                ogArray[j + 1] = tmp\r\n                \r\n            }\r\n            else {\r\n                changeArray.push([j, j+1, false])\r\n            }\r\n  \r\n        }\r\n \r\n    }\r\n\r\n    return changeArray\r\n\r\n}\r\n\r\nexport default BubbleSort","\r\nconst InsertionSort = (unsortedArray) => {\r\n\r\n    let changeArray = [];\r\n    let key = null;\r\n    let j = null;\r\n\r\n\tfor (let i = 1; i < unsortedArray.length; i++) {\r\n\t\tkey = unsortedArray[i];\r\n\t\tj = i - 1;\r\n\r\n        // changeArray.push([j, j+1, false, false, false, true]); //change colour \r\n        // changeArray.push([j, j+1, false, false, false, true]); //change colour\r\n        // changeArray.push([i, i, true, key, key, true]); //dud height change fix this pls\r\n\r\n        while (j >= 0 && unsortedArray[j] > key){\r\n            \r\n            //these colours are the ones to the left of i that we want to shift right until placement\r\n            changeArray.push([j, j+1, false, false, false, true]); //shift colour change 1\r\n            changeArray.push([j, j+1, false, false, false, true]); //shift colour change 2\r\n            changeArray.push([j, j+1, true, unsortedArray[j], unsortedArray[j+1], false]); //shift value change\r\n\r\n\t\t\tunsortedArray[j + 1] = unsortedArray[j];\r\n\t\t\tj--;\r\n\t\t}\r\n        changeArray.push([j + 1, i, false, false, false, true]); //change colour 1\r\n        changeArray.push([j + 1, i, false, false, false, true]); //change colour 2\r\n        changeArray.push([j+1, i, true, unsortedArray[j+1], key, true]); //insertion value change\r\n\t\tunsortedArray[j + 1] = key;\r\n\t}\r\n\r\n    \r\n    return changeArray;\r\n}\r\n\r\nexport default InsertionSort;","\r\nconst LongestDigitHelper = (array) => {\r\n\r\n    let longestDigit = 0;\r\n    let curr_length = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n\r\n        curr_length = Math.ceil(Math.log10(array[i] + 1)); //find the length of a number ie. 1024 is length 4\r\n\r\n        if (curr_length > longestDigit) {\r\n            longestDigit = curr_length;\r\n        }\r\n\r\n\r\n    }\r\n    return longestDigit\r\n}\r\n\r\nexport default LongestDigitHelper;","import LongestDigitHelper from '../Helpers/LongestDigitHelper'\r\nimport FlattenArray from '../Helpers/FlattenArray';\r\n\r\nconst RadixSort = (unsortedArray) => {\r\n\r\n    let workingArray = unsortedArray;\r\n    let changeArray = []; //array containing animations\r\n    let current_power = 0; //power for digit placement\r\n    let longest_digit = LongestDigitHelper(unsortedArray); //how many loops we must go through\r\n    let buckets = [[], [], [], [], [], [], [], [], [], []];\r\n    let goto_bucket = 0;\r\n    let tester = [];\r\n    let flattenedArray = []\r\n\r\n    for (let i = 0; i < longest_digit; i++) {\r\n\r\n        for (let j = 0; j < workingArray.length; j++) {\r\n\r\n            goto_bucket = Math.floor(workingArray[j] / Math.pow(10, current_power)) % 10; //grab the digit at the n-th place and get index\r\n            buckets[goto_bucket].push(workingArray[j]);\r\n        }\r\n\r\n        \r\n        \r\n        let indx = 0;\r\n        flattenedArray.splice(0, flattenedArray.length);\r\n        for (let i = 0; i < buckets.length; i++){\r\n\r\n            \r\n            for (let j = 0; j < buckets[i].length; j++) {\r\n    \r\n                changeArray.push([indx, buckets[i][j], false]) //element indx of height change, value to change to, false for no val change just colour\r\n                changeArray.push([indx, buckets[i][j], false])\r\n                changeArray.push([indx, buckets[i][j], true])\r\n\r\n                flattenedArray.push(buckets[i][j]);\r\n                indx++;\r\n            }\r\n    \r\n        }\r\n\r\n        workingArray = flattenedArray;\r\n        buckets.splice(0, buckets.length); //clear buckets 2d array\r\n        buckets = [[], [], [], [], [], [], [], [], [], []];\r\n        current_power += 1;\r\n    }\r\n\r\n    console.log(flattenedArray)\r\n    return changeArray;\r\n}\r\n\r\nexport default RadixSort;","\r\nconst MergeSortController = (unsortedArray) =>{\r\n    //check if sorting is necessary\r\n    if (unsortedArray.length < 2) {\r\n        return unsortedArray;\r\n    }\r\n\r\n    const changeArray = []; //array of animations \r\n    const auxArray = unsortedArray.slice(); //copy unsortedArray\r\n    MergeHelper(unsortedArray, 0, unsortedArray.length - 1, auxArray, changeArray);\r\n    \r\n    return changeArray;\r\n  }\r\n  \r\nconst MergeHelper = (main, start, end, auxArray, changeArray) =>{\r\n    \r\n    // if no need to use helper\r\n    if (start === end) {\r\n        return;\r\n    }\r\n\r\n    const middle = Math.floor((start + end) / 2);\r\n    MergeHelper(auxArray, start, middle, main, changeArray);\r\n    MergeHelper(auxArray, middle + 1, end, main, changeArray);\r\n    MergeSort(main, start, middle, end, auxArray, changeArray);\r\n  }\r\n  \r\nconst MergeSort = (main, start, middle, end, auxArray, changeArray) =>{\r\n    let k = start, i = start, j = (middle + 1);\r\n    while (i <= middle && j <= end) {\r\n      \r\n      //2 colour changes\r\n      changeArray.push([i, j]);\r\n      changeArray.push([i, j]);\r\n\r\n      if (auxArray[i] <= auxArray[j]) {\r\n        // overwrite index k with i\r\n        changeArray.push([k, auxArray[i]]);\r\n        main[k++] = auxArray[i++];\r\n      } else {\r\n        // overwrite index k with j\r\n        changeArray.push([k, auxArray[j]]);\r\n        main[k++] = auxArray[j++];\r\n      }\r\n    }\r\n    while (i <= middle) {\r\n      \r\n      // 2 colour changes\r\n      changeArray.push([i, i]);\r\n      changeArray.push([i, i]);\r\n      \r\n      // overwrite index k with i\r\n      changeArray.push([k, auxArray[i]]);\r\n      main[k++] = auxArray[i++];\r\n    }\r\n    while (j <= end) {\r\n\r\n      //2 colour changes\r\n      changeArray.push([j, j]);\r\n      changeArray.push([j, j]);\r\n\r\n      // overwrite index k with j\r\n      changeArray.push([k, auxArray[j]]);\r\n      main[k++] = auxArray[j++];\r\n    }\r\n}\r\n\r\nexport default MergeSortController;","\r\nimport {React, useState, useEffect} from \"react\"\r\nimport './SortingVisualizer.css'\r\nimport BubbleSort from '../Algorithms/BubbleSort'\r\nimport InsertionSort from '../Algorithms/InsertionSort'\r\nimport RadixSort from '../Algorithms/RadixSort';\r\nimport MergeSortController from '../Algorithms/MergeSort'\r\n\r\n\r\nconst SortingVisualizer = (props) => {\r\n\r\n    const [array, setArray] = useState([]);\r\n    const [mounted, setMounted] = useState(false)\r\n\r\n    useEffect( () => {\r\n        generateArray()\r\n    }, [mounted])\r\n\r\n\r\n    \r\n\r\n    const generateArray = () => {\r\n\r\n        let generatedArray = [];\r\n        for (let i = 0; i < 125; i++) {\r\n            generatedArray.push(Math.floor(Math.random() * (650 - 15 + 1) + 15));\r\n        }\r\n        setArray(generatedArray);\r\n        return;\r\n    }\r\n\r\n    const getRadixSort = () => {\r\n\r\n        let aniArray = RadixSort(array);\r\n        const arrayElements = document.getElementsByClassName('array-element')\r\n\r\n        for (let i = 0; i < aniArray.length; i++) {\r\n\r\n            const elementIndx = aniArray[i][0];\r\n            const elementStyle = arrayElements[elementIndx].style;\r\n            const colour = i % 3 === 0 ? 'red' : 'rgb(77, 77, 206)';\r\n\r\n            if (i % 3 === 2) {\r\n                setTimeout(() => {\r\n                    if (aniArray[i][2] === true) {\r\n                        elementStyle.height = `${aniArray[i][1]}px`\r\n                    }\r\n                }, i*3)\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    elementStyle.backgroundColor = colour;\r\n                }, i*3) \r\n            }\r\n\r\n        }\r\n        return;\r\n    }\r\n    const getMergeSort = () => {\r\n        \r\n        let aniArray = MergeSortController(array);\r\n        const arrayElements = document.getElementsByClassName('array-element')\r\n\r\n        for (let i = 0; i < aniArray.length; i++) {\r\n            \r\n            const colour = i % 3 === 0 ? 'red' : 'rgb(77, 77, 206)';\r\n\r\n            if (i % 3 !== 2) {\r\n\r\n                const [elementOne, elementTwo] = aniArray[i];\r\n                const elementOneStyle = arrayElements[elementOne].style;\r\n                const elementTwoStyle = arrayElements[elementTwo].style;\r\n\r\n              setTimeout(() => {\r\n                elementOneStyle.backgroundColor = colour;\r\n                elementTwoStyle.backgroundColor = colour;\r\n              }, i*3);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [elementOne, heightOne] = aniArray[i];\r\n                    const elementOneStyle = arrayElements[elementOne].style;\r\n                    elementOneStyle.height = `${heightOne}px`;\r\n                  }, i*3);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    const getBubbleSort = () => {\r\n        \r\n        let aniArray = BubbleSort(array);\r\n        const arrayElements = document.getElementsByClassName('array-element')\r\n        \r\n        for (let i = 0; i < aniArray.length; i++) {\r\n\r\n            const elementOneIndx = aniArray[i][0]\r\n            const elementTwoIndx = aniArray[i][1]\r\n            const elementOneStyle = arrayElements[elementOneIndx].style\r\n            const elementTwoStyle = arrayElements[elementTwoIndx].style\r\n            const colour = i % 3 === 0 ? 'red' : 'rgb(77, 77, 206)';\r\n            if (i % 3 === 2) {\r\n                setTimeout(() => {\r\n                    if (aniArray[i][2] === true) {\r\n                        elementOneStyle.height = `${aniArray[i][4]}px`\r\n                        elementTwoStyle.height = `${aniArray[i][3]}px`\r\n                    }\r\n                }, i*3)\r\n  \r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    elementOneStyle.backgroundColor = colour;\r\n                    elementTwoStyle.backgroundColor = colour;\r\n                }, i*3) \r\n            }\r\n        }\r\n\r\n        return;\r\n    }\r\n    const getInsertionSort = () => {\r\n\r\n        let aniArray = InsertionSort(array);\r\n        const arrayElements = document.getElementsByClassName('array-element')\r\n        for (let i = 0; i < aniArray.length; i++) {\r\n\r\n            const elementOneIndx = aniArray[i][0]\r\n            const elementTwoIndx = aniArray[i][1]\r\n            const elementOneStyle = arrayElements[elementOneIndx].style\r\n            const elementTwoStyle = arrayElements[elementTwoIndx].style\r\n            const colour = i % 3 === 0 ? 'red' : 'rgb(77, 77, 206)'; //if false then colour change\r\n            if (aniArray[i][2] === true) { //if true then value change\r\n                setTimeout(() => {\r\n                        elementOneStyle.height = `${aniArray[i][4]}px`\r\n                        if (aniArray[i][5] === false) {\r\n                            elementTwoStyle.height = `${aniArray[i][3]}px`\r\n                        }\r\n                        \r\n                    \r\n                }, i*3)\r\n  \r\n            }\r\n\r\n            if (aniArray[i][5] === true) {\r\n                setTimeout(() => {\r\n                    elementOneStyle.backgroundColor = colour;\r\n                    elementTwoStyle.backgroundColor = colour;\r\n                }, i*3)\r\n                \r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n\r\n    return (\r\n        <> \r\n        <button className=\"button-element\" onClick={() => generateArray()}>\r\n            Generate New Array\r\n        </button>\r\n        <button className=\"button-element\" onClick={() => getRadixSort()}>\r\n            Radix Sort\r\n        </button>\r\n        <button className=\"button-element\" onClick={() => getMergeSort()}>\r\n            Merge Sort\r\n        </button>\r\n        <button className=\"button-element\" onClick={() => getBubbleSort()}>\r\n            Bubble Sort\r\n        </button>\r\n        <button className=\"button-element\" onClick={() => getInsertionSort()}>\r\n            Insertion Sort\r\n        </button>\r\n        \r\n        <div className=\"element-container\">\r\n            {array.map((value, indx) => {\r\n                    return (\r\n                    <div \r\n                        className =\"array-element\" \r\n                        key ={indx} \r\n                        style={{height: `${value}px`}}></div>\r\n                    ) \r\n                })}\r\n        </div>\r\n        </>\r\n    );\r\n \r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import './App.css';\nimport SortingVisualizer from './Visualizer/SortingVisualizer'\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n        \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}